{"version":3,"sources":["component/QuestionPanel/QuestionPanel.jsx","component/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","minHeight","maxHeight","textAlign","padding","question","color","fontSize","progressRoot","height","backgroundColor","lighten","borderRadius","bar","QuestionPanel","nextQuestion","total","questionNo","progress","checkUserAnswer","maxScore","score","useState","answered","setAnswered","message","setMessage","handleAnswer","ans","decodeURIComponent","classes","className","variant","value","Card","CardActionArea","CardContent","Typography","component","gutterBottom","Divider","CardActions","map","key","Button","onClick","disabled","valueBuffer","Home","state","questions","data","current_question","current_question_no","total_question_no","length","currectAnswered","wrongAnswered","current","setState","userAns","_score","toFixed","_maxScore","this","Component","theme","createMuiTheme","palette","primary","light","main","dark","secondary","typography","useNextVariants","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e6e496d9.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport {lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport StarFillIcon from '@material-ui/icons/StarOutlined';\r\nimport StarOutlineIcon from '@material-ui/icons/StarBorderOutlined';\r\nimport BorderLinearProgress from '@material-ui/core/LinearProgress'\r\nimport './QuestionPanel.css';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 700,\r\n    minHeight:350,\r\n    maxHeight:400,\r\n    textAlign:'left',\r\n    padding:50\r\n  },\r\n  question:{\r\n    color:'black',\r\n    fontSize: '2rem',\r\n  },\r\n\r\n  progressRoot: {\r\n    height: 10,\r\n    backgroundColor: lighten('#ff6c5c', 0.5),\r\n    borderRadius: 20,\r\n\r\n  },\r\n  bar: {\r\n    height: 16,\r\n    borderRadius: 20,\r\n  },\r\n});\r\n\r\nexport default function QuestionPanel({question, nextQuestion, total, questionNo, progress, checkUserAnswer,maxScore, score}) {\r\n  const [answered,setAnswered] = useState('');\r\n  const [message,setMessage]=useState(''); \r\n  \r\n  const handleAnswer = (ans) =>{\r\n    setAnswered(ans);\r\n    checkUserAnswer(ans);\r\n    if(decodeURIComponent(question['correct_answer'])==ans){\r\n      setMessage('Correct!')\r\n    }\r\n    else{\r\n      setMessage('InCorrect!')\r\n    }\r\n\r\n  }\r\n\r\n  function difficultyLevelChecker (){\r\n    if(question['difficulty'] === 'hard'){\r\n      return (\r\n        <>\r\n       <StarFillIcon/>\r\n       <StarFillIcon/>\r\n       <StarFillIcon/>\r\n       </>\r\n      )\r\n    }\r\n    else if (question['difficulty'] === 'medium'){\r\n      return (\r\n        <>\r\n       <StarFillIcon/>\r\n       <StarFillIcon/>\r\n       <StarOutlineIcon/>\r\n       </>\r\n      )\r\n    }\r\n    else if (question['difficulty'] === 'easy'){\r\n      return (\r\n        <>\r\n       <StarFillIcon/>\r\n       <StarOutlineIcon/>\r\n       <StarOutlineIcon/>\r\n       </>\r\n      )\r\n    } \r\n    else {\r\n      return (\r\n        <>\r\n       <StarOutlineIcon/>\r\n       <StarOutlineIcon/>\r\n       <StarOutlineIcon/>\r\n       </>\r\n      )\r\n    } \r\n   }\r\n  const classes = useStyles();\r\n  return (<>\r\n        <div className={classes.progressRoot}>\r\n\r\n          <BorderLinearProgress\r\n              className={classes.bar}\r\n              variant=\"determinate\"\r\n              color=\"secondary\"\r\n              value={progress}\r\n            />\r\n        </div>\r\n\r\n        <Card className={classes.root}>\r\n          <CardActionArea>  \r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h3\">\r\n                Question {questionNo} of {total}\r\n              </Typography>\r\n              <Typography gutterBottom variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {decodeURIComponent(question['category'])}\r\n              </Typography>\r\n              { difficultyLevelChecker()}\r\n              <Divider/>\r\n              <Typography  variant=\"body1\" color=\"textSecondary\" component=\"p\" className={classes.question}>\r\n                {decodeURIComponent(question['question'])}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <CardActions>\r\n            { question['incorrect_answers'].map(key =>\r\n                <Button variant={answered === decodeURIComponent(key)? \"contained\" :\"outlined\"} \r\n                        color=\"primary\" key={decodeURIComponent(key)} \r\n                        onClick={()=>handleAnswer(decodeURIComponent(key))}\r\n                        disabled={answered!==''?true : false}\r\n                >\r\n                        {decodeURIComponent(key)}\r\n                </Button>\r\n              )\r\n            }\r\n            <Button variant={answered === decodeURIComponent(question['correct_answer'])? \"contained\" :\"outlined\"} \r\n                    color=\"primary\" key={decodeURIComponent(question['correct_answer'])} \r\n                    onClick={()=>handleAnswer(decodeURIComponent(question['correct_answer']))}\r\n                    disabled={answered!==''?true : false}\r\n            >\r\n                  {decodeURIComponent(question['correct_answer'])}\r\n            </Button>\r\n          </CardActions>\r\n          <Typography variant=\"h5\" component=\"h3\" className=\"message\">\r\n              {answered && message}\r\n          </Typography>\r\n            \r\n          {answered!=='' && progress !==100? \r\n            <Button variant=\"contained\" \r\n              className=\"next-button\" \r\n              color=\"secondary\" key=\"next\" onClick={()=>{nextQuestion(); setAnswered('');}} \r\n              >\r\n                Next Question\r\n          </Button>\r\n          \r\n          : ''}\r\n            \r\n\r\n        </Card>\r\n        <div className=\"score-wrapper\">\r\n          <p>Score: {score} %</p>\r\n          <p>MaxScore: {maxScore} %</p> \r\n        </div>\r\n\r\n\r\n        <div className={classes.progressRoot}>\r\n          <BorderLinearProgress\r\n              className={classes.bar}\r\n              variant=\"determinate\"\r\n              color=\"secondary\"\r\n              value={score}\r\n              valueBuffer={maxScore}\r\n            />\r\n        </div>\r\n    </>\r\n  );\r\n}","import React, {Component}from 'react';\r\nimport data from '../data/quiz-data.json';\r\nimport QuestionPanel from '../QuestionPanel/QuestionPanel';\r\nimport './Home.css';\r\n\r\n\r\nclass Home extends Component {\r\n    state = { \r\n        questions : data,\r\n        current_question:null,\r\n        current_question_no : 1,\r\n        total_question_no:data.length,\r\n        progress:5,\r\n        score:0,\r\n        maxScore:0,\r\n        currectAnswered:0,\r\n        wrongAnswered:0,\r\n\r\n     }\r\n     componentDidMount(){\r\n         this.setState({current_question:this.state.questions[0]})\r\n     }\r\n     nextQuestion = () =>{\r\n        let current = this.state.current_question_no+1;\r\n        if(current <= this.state.total_question_no){\r\n            this.setState({current_question_no:current})\r\n            this.setState({current_question:this.state.questions[current-1]})\r\n\r\n           this.setState({progress:(current/this.state.total_question_no)* 100});\r\n        }\r\n     }\r\n     checkUserAnswer = (userAns) =>{\r\n        const {current_question,current_question_no ,currectAnswered,wrongAnswered , total_question_no} = this.state;\r\n        if(decodeURIComponent(current_question['correct_answer'])==userAns){\r\n            this.setState({currectAnswered:currectAnswered+1});\r\n\r\n            const _score =(((currectAnswered +1) / (current_question_no)) * 100).toFixed(2);\r\n            this.setState({score:_score});\r\n        }\r\n        else{\r\n            this.setState({wrongAnswered:wrongAnswered+1});\r\n\r\n            const _score =(((currectAnswered) / (current_question_no)) * 100).toFixed(2);\r\n            this.setState({score:_score});\r\n        }\r\n\r\n        let _maxScore = (((current_question_no) / (total_question_no)) * 100).toFixed(2);\r\n        this.setState({maxScore:_maxScore})\r\n\r\n        \r\n     }\r\n\r\n    render() { \r\n        return (\r\n\r\n            <div className=\"question-panel-wrapper\">\r\n                {this.state.current_question !==null?\r\n                    <QuestionPanel \r\n                        question={this.state.current_question}\r\n                        nextQuestion={this.nextQuestion}\r\n                        total={this.state.total_question_no}\r\n                        questionNo={this.state.current_question_no}\r\n                        progress={this.state.progress}\r\n                        checkUserAnswer={this.checkUserAnswer}\r\n                        maxScore={this.state.maxScore}\r\n                        score={this.state.score}\r\n                    />\r\n                :\"\"\r\n                }\r\n                \r\n            </div>\r\n          );\r\n    }\r\n}\r\n \r\nexport default Home;","import React from 'react';\r\nimport './App.css';\r\nimport Home from './component/Home/Home';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';  \r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n     primary: {\r\n        light: '#fff',\r\n        main: '#e7643d',\r\n        dark: '#000'\r\n     },\r\n     secondary: {\r\n       main: '#f44336',\r\n     },\r\n  },\r\n  typography: { \r\n     useNextVariants: true\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n       <MuiThemeProvider theme = { theme }>\r\n          <Home/>\r\n       </MuiThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}